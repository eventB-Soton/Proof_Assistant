/*
 * generated by Xtext 2.16.0
 */
grammar InternalProofAssistant;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ac.soton.xeventb.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ac.soton.xeventb.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ac.soton.xeventb.services.ProofAssistantGrammarAccess;

}
@parser::members {
	private ProofAssistantGrammarAccess grammarAccess;

	public void setGrammarAccess(ProofAssistantGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProofAssistant
entryRuleProofAssistant
:
{ before(grammarAccess.getProofAssistantRule()); }
	 ruleProofAssistant
{ after(grammarAccess.getProofAssistantRule()); } 
	 EOF 
;

// Rule ProofAssistant
ruleProofAssistant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProofAssistantAccess().getGroup()); }
		(rule__ProofAssistant__Group__0)
		{ after(grammarAccess.getProofAssistantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHint
entryRuleHint
:
{ before(grammarAccess.getHintRule()); }
	 ruleHint
{ after(grammarAccess.getHintRule()); } 
	 EOF 
;

// Rule Hint
ruleHint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHintAccess().getSelectionHintParserRuleCall()); }
		ruleSelectionHint
		{ after(grammarAccess.getHintAccess().getSelectionHintParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectionHint
entryRuleSelectionHint
:
{ before(grammarAccess.getSelectionHintRule()); }
	 ruleSelectionHint
{ after(grammarAccess.getSelectionHintRule()); } 
	 EOF 
;

// Rule SelectionHint
ruleSelectionHint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectionHintAccess().getGroup()); }
		(rule__SelectionHint__Group__0)
		{ after(grammarAccess.getSelectionHintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProofAssistant__Group__0__Impl
	rule__ProofAssistant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProofAssistantAccess().getProofAssistantKeyword_0()); }
	'ProofAssistant'
	{ after(grammarAccess.getProofAssistantAccess().getProofAssistantKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProofAssistant__Group__1__Impl
	rule__ProofAssistant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProofAssistantAccess().getNameAssignment_1()); }
	(rule__ProofAssistant__NameAssignment_1)
	{ after(grammarAccess.getProofAssistantAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProofAssistant__Group__2__Impl
	rule__ProofAssistant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProofAssistantAccess().getSupportsKeyword_2()); }
	'supports'
	{ after(grammarAccess.getProofAssistantAccess().getSupportsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProofAssistant__Group__3__Impl
	rule__ProofAssistant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProofAssistantAccess().getComponentAssignment_3()); }
	(rule__ProofAssistant__ComponentAssignment_3)
	{ after(grammarAccess.getProofAssistantAccess().getComponentAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProofAssistant__Group__4__Impl
	rule__ProofAssistant__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProofAssistantAccess().getGroup_4()); }
	(rule__ProofAssistant__Group_4__0)*
	{ after(grammarAccess.getProofAssistantAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProofAssistant__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProofAssistantAccess().getEndKeyword_5()); }
	'end'
	{ after(grammarAccess.getProofAssistantAccess().getEndKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProofAssistant__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProofAssistant__Group_4__0__Impl
	rule__ProofAssistant__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProofAssistantAccess().getHintsKeyword_4_0()); }
	'hints'
	{ after(grammarAccess.getProofAssistantAccess().getHintsKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProofAssistant__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getProofAssistantAccess().getHintsAssignment_4_1()); }
		(rule__ProofAssistant__HintsAssignment_4_1)
		{ after(grammarAccess.getProofAssistantAccess().getHintsAssignment_4_1()); }
	)
	(
		{ before(grammarAccess.getProofAssistantAccess().getHintsAssignment_4_1()); }
		(rule__ProofAssistant__HintsAssignment_4_1)*
		{ after(grammarAccess.getProofAssistantAccess().getHintsAssignment_4_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionHint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectionHint__Group__0__Impl
	rule__SelectionHint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionHint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionHintAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getSelectionHintAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionHint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectionHint__Group__1__Impl
	rule__SelectionHint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionHint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionHintAccess().getElementAssignment_1()); }
	(rule__SelectionHint__ElementAssignment_1)
	{ after(grammarAccess.getSelectionHintAccess().getElementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionHint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectionHint__Group__2__Impl
	rule__SelectionHint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionHint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionHintAccess().getSelectsKeyword_2()); }
	'selects'
	{ after(grammarAccess.getSelectionHintAccess().getSelectsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionHint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectionHint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionHint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectionHintAccess().getSelectionsAssignment_3()); }
	(rule__SelectionHint__SelectionsAssignment_3)
	{ after(grammarAccess.getSelectionHintAccess().getSelectionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProofAssistant__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProofAssistantAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getProofAssistantAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__ComponentAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProofAssistantAccess().getComponentEventBNamedCommentedComponentElementCrossReference_3_0()); }
		(
			{ before(grammarAccess.getProofAssistantAccess().getComponentEventBNamedCommentedComponentElementEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getProofAssistantAccess().getComponentEventBNamedCommentedComponentElementEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getProofAssistantAccess().getComponentEventBNamedCommentedComponentElementCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofAssistant__HintsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProofAssistantAccess().getHintsHintParserRuleCall_4_1_0()); }
		ruleHint
		{ after(grammarAccess.getProofAssistantAccess().getHintsHintParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionHint__ElementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectionHintAccess().getElementEventBElementCrossReference_1_0()); }
		(
			{ before(grammarAccess.getSelectionHintAccess().getElementEventBElementEStringParserRuleCall_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getSelectionHintAccess().getElementEventBElementEStringParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getSelectionHintAccess().getElementEventBElementCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionHint__SelectionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectionHintAccess().getSelectionsEventBElementCrossReference_3_0()); }
		(
			{ before(grammarAccess.getSelectionHintAccess().getSelectionsEventBElementEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getSelectionHintAccess().getSelectionsEventBElementEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getSelectionHintAccess().getSelectionsEventBElementCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
