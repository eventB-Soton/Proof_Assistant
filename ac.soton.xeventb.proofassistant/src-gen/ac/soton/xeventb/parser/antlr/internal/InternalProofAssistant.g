/*
 * generated by Xtext 2.16.0
 */
grammar InternalProofAssistant;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ac.soton.xeventb.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ac.soton.xeventb.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ac.soton.xeventb.services.ProofAssistantGrammarAccess;

}

@parser::members {

 	private ProofAssistantGrammarAccess grammarAccess;

    public InternalProofAssistantParser(TokenStream input, ProofAssistantGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ProofAssistant";
   	}

   	@Override
   	protected ProofAssistantGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProofAssistant
entryRuleProofAssistant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProofAssistantRule()); }
	iv_ruleProofAssistant=ruleProofAssistant
	{ $current=$iv_ruleProofAssistant.current; }
	EOF;

// Rule ProofAssistant
ruleProofAssistant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ProofAssistant'
		{
			newLeafNode(otherlv_0, grammarAccess.getProofAssistantAccess().getProofAssistantKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProofAssistantAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProofAssistantRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"ac.soton.xeventb.ProofAssistant.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='supports'
		{
			newLeafNode(otherlv_2, grammarAccess.getProofAssistantAccess().getSupportsKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProofAssistantRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getProofAssistantAccess().getComponentEventBNamedCommentedComponentElementCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='hints'
			{
				newLeafNode(otherlv_4, grammarAccess.getProofAssistantAccess().getHintsKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProofAssistantAccess().getHintsHintParserRuleCall_4_1_0());
					}
					lv_hints_5_0=ruleHint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProofAssistantRule());
						}
						add(
							$current,
							"hints",
							lv_hints_5_0,
							"ac.soton.xeventb.ProofAssistant.Hint");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)*
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getProofAssistantAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleHint
entryRuleHint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHintRule()); }
	iv_ruleHint=ruleHint
	{ $current=$iv_ruleHint.current; }
	EOF;

// Rule Hint
ruleHint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHintAccess().getSelectionHintParserRuleCall_0());
		}
		this_SelectionHint_0=ruleSelectionHint
		{
			$current = $this_SelectionHint_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHintAccess().getCasesHintParserRuleCall_1());
		}
		this_CasesHint_1=ruleCasesHint
		{
			$current = $this_CasesHint_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleSelectionHint
entryRuleSelectionHint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectionHintRule()); }
	iv_ruleSelectionHint=ruleSelectionHint
	{ $current=$iv_ruleSelectionHint.current; }
	EOF;

// Rule SelectionHint
ruleSelectionHint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectionHintAccess().getForKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectionHintRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSelectionHintAccess().getElementEventBElementCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='selects'
		{
			newLeafNode(otherlv_2, grammarAccess.getSelectionHintAccess().getSelectsKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectionHintRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSelectionHintAccess().getSelectionsEventBElementCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCasesHint
entryRuleCasesHint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCasesHintRule()); }
	iv_ruleCasesHint=ruleCasesHint
	{ $current=$iv_ruleCasesHint.current; }
	EOF;

// Rule CasesHint
ruleCasesHint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getCasesHintAccess().getForKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCasesHintRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getCasesHintAccess().getElementEventBElementCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='cases'
		{
			newLeafNode(otherlv_2, grammarAccess.getCasesHintAccess().getCasesKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCasesHintAccess().getCasesCaseParserRuleCall_3_0());
				}
				lv_cases_3_0=ruleCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCasesHintRule());
					}
					add(
						$current,
						"cases",
						lv_cases_3_0,
						"ac.soton.xeventb.ProofAssistant.Case");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	iv_ruleCase=ruleCase
	{ $current=$iv_ruleCase.current; }
	EOF;

// Rule Case
ruleCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_XLABEL
				{
					newLeafNode(lv_name_0_0, grammarAccess.getCaseAccess().getNameXLABELTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCaseRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"ac.soton.xeventb.ProofAssistant.XLABEL");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseAccess().getPredicateXFormulaParserRuleCall_1_0());
				}
				lv_predicate_1_0=ruleXFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_1_0,
						"ac.soton.xeventb.ProofAssistant.XFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleXFormula
entryRuleXFormula returns [String current=null]:
	{ newCompositeNode(grammarAccess.getXFormulaRule()); }
	iv_ruleXFormula=ruleXFormula
	{ $current=$iv_ruleXFormula.current.getText(); }
	EOF;

// Rule XFormula
ruleXFormula returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXFormulaAccess().getEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0());
		}
		this_EVENTB_IDENTIFIER_KEYWORD_0=ruleEVENTB_IDENTIFIER_KEYWORD
		{
			$current.merge(this_EVENTB_IDENTIFIER_KEYWORD_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFormulaAccess().getEVENTB_PREDICATE_SYMBOLSParserRuleCall_1());
		}
		this_EVENTB_PREDICATE_SYMBOLS_1=ruleEVENTB_PREDICATE_SYMBOLS
		{
			$current.merge(this_EVENTB_PREDICATE_SYMBOLS_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFormulaAccess().getEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2());
		}
		this_EVENTB_EXPRESSION_SYMBOLS_2=ruleEVENTB_EXPRESSION_SYMBOLS
		{
			$current.merge(this_EVENTB_EXPRESSION_SYMBOLS_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_ID_3=RULE_ID
		{
			$current.merge(this_ID_3);
		}
		{
			newLeafNode(this_ID_3, grammarAccess.getXFormulaAccess().getIDTerminalRuleCall_3());
		}
		    |
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getXFormulaAccess().getINTTerminalRuleCall_4());
		}
	)+
;

// Entry rule entryRuleEVENTB_IDENTIFIER_KEYWORD
entryRuleEVENTB_IDENTIFIER_KEYWORD returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEVENTB_IDENTIFIER_KEYWORDRule()); }
	iv_ruleEVENTB_IDENTIFIER_KEYWORD=ruleEVENTB_IDENTIFIER_KEYWORD
	{ $current=$iv_ruleEVENTB_IDENTIFIER_KEYWORD.current.getText(); }
	EOF;

// Rule EVENTB_IDENTIFIER_KEYWORD
ruleEVENTB_IDENTIFIER_KEYWORD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='BOOL'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getBOOLKeyword_0());
		}
		    |
		kw='FALSE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getFALSEKeyword_1());
		}
		    |
		kw='TRUE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getTRUEKeyword_2());
		}
		    |
		kw='bool'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getBoolKeyword_3());
		}
		    |
		kw='card'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getCardKeyword_4());
		}
		    |
		kw='dom'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getDomKeyword_5());
		}
		    |
		kw='finite'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getFiniteKeyword_6());
		}
		    |
		kw='id'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getIdKeyword_7());
		}
		    |
		kw='inter'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getInterKeyword_8());
		}
		    |
		kw='max'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getMaxKeyword_9());
		}
		    |
		kw='min'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getMinKeyword_10());
		}
		    |
		kw='mod'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getModKeyword_11());
		}
		    |
		kw='pred'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getPredKeyword_12());
		}
		    |
		kw='prj1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getPrj1Keyword_13());
		}
		    |
		kw='prj2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getPrj2Keyword_14());
		}
		    |
		kw='ran'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getRanKeyword_15());
		}
		    |
		kw='succ'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getSuccKeyword_16());
		}
		    |
		kw='union'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getUnionKeyword_17());
		}
		    |
		kw='\u21151'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getDoubleStruckCapitalNDigitOneKeyword_18());
		}
		    |
		kw='\u2115'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getDoubleStruckCapitalNKeyword_19());
		}
		    |
		kw='\u21191'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getDoubleStruckCapitalPDigitOneKeyword_20());
		}
		    |
		kw='\u2119'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getDoubleStruckCapitalPKeyword_21());
		}
		    |
		kw='\u2124'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getDoubleStruckCapitalZKeyword_22());
		}
	)
;

// Entry rule entryRuleEVENTB_PREDICATE_SYMBOLS
entryRuleEVENTB_PREDICATE_SYMBOLS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEVENTB_PREDICATE_SYMBOLSRule()); }
	iv_ruleEVENTB_PREDICATE_SYMBOLS=ruleEVENTB_PREDICATE_SYMBOLS
	{ $current=$iv_ruleEVENTB_PREDICATE_SYMBOLS.current.getText(); }
	EOF;

// Rule EVENTB_PREDICATE_SYMBOLS
ruleEVENTB_PREDICATE_SYMBOLS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getLeftParenthesisKeyword_0());
		}
		    |
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getRightParenthesisKeyword_1());
		}
		    |
		kw='\u21D4'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getLeftRightDoubleArrowKeyword_2());
		}
		    |
		kw='\u21D2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getRightwardsDoubleArrowKeyword_3());
		}
		    |
		kw='\u2227'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getLogicalAndKeyword_4());
		}
		    |
		kw='&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getAmpersandKeyword_5());
		}
		    |
		kw='\u2228'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getLogicalOrKeyword_6());
		}
		    |
		kw='\u00AC'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getNotSignKeyword_7());
		}
		    |
		kw='\u22A4'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getDownTackKeyword_8());
		}
		    |
		kw='\u22A5'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getUpTackKeyword_9());
		}
		    |
		kw='\u2200'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getForAllKeyword_10());
		}
		    |
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getExclamationMarkKeyword_11());
		}
		    |
		kw='\u2203'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getThereExistsKeyword_12());
		}
		    |
		kw='#'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getNumberSignKeyword_13());
		}
		    |
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getCommaKeyword_14());
		}
		    |
		kw='\u00B7'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getMiddleDotKeyword_15());
		}
		    |
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getFullStopKeyword_16());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getEqualsSignKeyword_17());
		}
		    |
		kw='\u2260'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getNotEqualToKeyword_18());
		}
		    |
		kw='\u2264'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getLessThanOrEqualToKeyword_19());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getLessThanSignKeyword_20());
		}
		    |
		kw='\u2265'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getGreaterThanOrEqualToKeyword_21());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getGreaterThanSignKeyword_22());
		}
		    |
		kw='\u2208'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getElementOfKeyword_23());
		}
		    |
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getColonKeyword_24());
		}
		    |
		kw='\u2209'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getNotAnElementOfKeyword_25());
		}
		    |
		kw='\u2282'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getSubsetOfKeyword_26());
		}
		    |
		kw='\u2284'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getNotASubsetOfKeyword_27());
		}
		    |
		kw='\u2286'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getSubsetOfOrEqualToKeyword_28());
		}
		    |
		kw='\u2288'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getNeitherASubsetOfNorEqualToKeyword_29());
		}
		    |
		kw='partition'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getPartitionKeyword_30());
		}
	)
;

// Entry rule entryRuleEVENTB_EXPRESSION_SYMBOLS
entryRuleEVENTB_EXPRESSION_SYMBOLS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEVENTB_EXPRESSION_SYMBOLSRule()); }
	iv_ruleEVENTB_EXPRESSION_SYMBOLS=ruleEVENTB_EXPRESSION_SYMBOLS
	{ $current=$iv_ruleEVENTB_EXPRESSION_SYMBOLS.current.getText(); }
	EOF;

// Rule EVENTB_EXPRESSION_SYMBOLS
ruleEVENTB_EXPRESSION_SYMBOLS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\u2194'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getLeftRightArrowKeyword_0());
		}
		    |
		kw='\uE100'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getPrivateUseAreaE100Keyword_1());
		}
		    |
		kw='\uE101'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getPrivateUseAreaE101Keyword_2());
		}
		    |
		kw='\uE102'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getPrivateUseAreaE102Keyword_3());
		}
		    |
		kw='\u21F8'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getRightwardsArrowWithVerticalStrokeKeyword_4());
		}
		    |
		kw='\u2192'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getRightwardsArrowKeyword_5());
		}
		    |
		kw='\u2914'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getRightwardsArrowWithTailWithVerticalStrokeKeyword_6());
		}
		    |
		kw='\u21A3'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getRightwardsArrowWithTailKeyword_7());
		}
		    |
		kw='\u2900'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8());
		}
		    |
		kw='\u21A0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getRightwardsTwoHeadedArrowKeyword_9());
		}
		    |
		kw='\u2916'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getRightwardsTwoHeadedArrowWithTailKeyword_10());
		}
		    |
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getLeftCurlyBracketKeyword_11());
		}
		    |
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getRightCurlyBracketKeyword_12());
		}
		    |
		kw='\u21A6'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getRightwardsArrowFromBarKeyword_13());
		}
		    |
		kw='\u2205'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getEmptySetKeyword_14());
		}
		    |
		kw='\u2229'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getIntersectionKeyword_15());
		}
		    |
		kw='\u222A'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getUnionKeyword_16());
		}
		    |
		kw='\u2216'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getSetMinusKeyword_17());
		}
		    |
		kw='\u00D7'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getMultiplicationSignKeyword_18());
		}
		    |
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getLeftSquareBracketKeyword_19());
		}
		    |
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getRightSquareBracketKeyword_20());
		}
		    |
		kw='\uE103'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getPrivateUseAreaE103Keyword_21());
		}
		    |
		kw='\u2218'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getRingOperatorKeyword_22());
		}
		    |
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getSemicolonKeyword_23());
		}
		    |
		kw='\u2297'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getCircledTimesKeyword_24());
		}
		    |
		kw='\u2225'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getParallelToKeyword_25());
		}
		    |
		kw='\u223C'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getTildeOperatorKeyword_26());
		}
		    |
		kw='\u25C1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getWhiteLeftPointingTriangleKeyword_27());
		}
		    |
		kw='\u2A64'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getZNotationDomainAntirestrictionKeyword_28());
		}
		    |
		kw='\u25B7'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getWhiteRightPointingTriangleKeyword_29());
		}
		    |
		kw='\u2A65'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getZNotationRangeAntirestrictionKeyword_30());
		}
		    |
		kw='\u03BB'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getGreekSmallLetterLamdaKeyword_31());
		}
		    |
		(
			kw='%'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getPercentSignKeyword_32_0());
			}
			kw='\u22C2'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getNAryIntersectionKeyword_32_1());
			}
		)
		    |
		kw='\u22C3'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getNAryUnionKeyword_33());
		}
		    |
		kw='\u2223'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getDividesKeyword_34());
		}
		    |
		kw='\u2025'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getTwoDotLeaderKeyword_35());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getPlusSignKeyword_36());
		}
		    |
		kw='\u2212'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getMinusSignKeyword_37());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getHyphenMinusKeyword_38());
		}
		    |
		kw='\u2217'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getAsteriskOperatorKeyword_39());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getAsteriskKeyword_40());
		}
		    |
		kw='\u00F7'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getDivisionSignKeyword_41());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getSolidusKeyword_42());
		}
		    |
		kw='^'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getCircumflexAccentKeyword_43());
		}
		    |
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getBackslashKeyword_44());
		}
	)
;

RULE_XLABEL : '@' ~(':')+ ':';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_'|'i'..'\uFFDC') ('a'..'z'|'A'..'Z'|'_'|'i'..'\uFFDC'|'0'..'9'|'\'')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
