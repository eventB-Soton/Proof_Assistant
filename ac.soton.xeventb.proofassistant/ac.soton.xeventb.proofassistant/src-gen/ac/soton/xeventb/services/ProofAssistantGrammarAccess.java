/*
 * generated by Xtext 2.16.0
 */
package ac.soton.xeventb.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ProofAssistantGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProofAssistantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.ProofAssistant.ProofAssistant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProofAssistantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSupportsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cComponentEventBNamedCommentedComponentElementCrossReference_3_0 = (CrossReference)cComponentAssignment_3.eContents().get(0);
		private final RuleCall cComponentEventBNamedCommentedComponentElementEStringParserRuleCall_3_0_1 = (RuleCall)cComponentEventBNamedCommentedComponentElementCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHintsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cHintsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cHintsHintParserRuleCall_4_1_0 = (RuleCall)cHintsAssignment_4_1.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ProofAssistant:
		//	'ProofAssistant' name=EString
		//	'supports' component=[core::EventBNamedCommentedComponentElement|EString] ('hints' hints+=Hint+)*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'ProofAssistant' name=EString 'supports' component=[core::EventBNamedCommentedComponentElement|EString] ('hints'
		//hints+=Hint+)* 'end'
		public Group getGroup() { return cGroup; }
		
		//'ProofAssistant'
		public Keyword getProofAssistantKeyword_0() { return cProofAssistantKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'supports'
		public Keyword getSupportsKeyword_2() { return cSupportsKeyword_2; }
		
		//component=[core::EventBNamedCommentedComponentElement|EString]
		public Assignment getComponentAssignment_3() { return cComponentAssignment_3; }
		
		//[core::EventBNamedCommentedComponentElement|EString]
		public CrossReference getComponentEventBNamedCommentedComponentElementCrossReference_3_0() { return cComponentEventBNamedCommentedComponentElementCrossReference_3_0; }
		
		//EString
		public RuleCall getComponentEventBNamedCommentedComponentElementEStringParserRuleCall_3_0_1() { return cComponentEventBNamedCommentedComponentElementEStringParserRuleCall_3_0_1; }
		
		//('hints' hints+=Hint+)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'hints'
		public Keyword getHintsKeyword_4_0() { return cHintsKeyword_4_0; }
		
		//hints+=Hint+
		public Assignment getHintsAssignment_4_1() { return cHintsAssignment_4_1; }
		
		//Hint
		public RuleCall getHintsHintParserRuleCall_4_1_0() { return cHintsHintParserRuleCall_4_1_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class HintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.ProofAssistant.Hint");
		private final RuleCall cSelectionHintParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Hint:
		//	SelectionHint;
		@Override public ParserRule getRule() { return rule; }
		
		//SelectionHint
		public RuleCall getSelectionHintParserRuleCall() { return cSelectionHintParserRuleCall; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.ProofAssistant.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class SelectionHintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.ProofAssistant.SelectionHint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElementEventBElementCrossReference_1_0 = (CrossReference)cElementAssignment_1.eContents().get(0);
		private final RuleCall cElementEventBElementEStringParserRuleCall_1_0_1 = (RuleCall)cElementEventBElementCrossReference_1_0.eContents().get(1);
		private final Keyword cSelectsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSelectionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSelectionsEventBElementCrossReference_3_0 = (CrossReference)cSelectionsAssignment_3.eContents().get(0);
		private final RuleCall cSelectionsEventBElementEStringParserRuleCall_3_0_1 = (RuleCall)cSelectionsEventBElementCrossReference_3_0.eContents().get(1);
		
		//SelectionHint:
		//	'for' element=[core::EventBElement|EString]
		//	'selects' selections+=[core::EventBElement|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'for' element=[core::EventBElement|EString] 'selects' selections+=[core::EventBElement|EString]
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//element=[core::EventBElement|EString]
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//[core::EventBElement|EString]
		public CrossReference getElementEventBElementCrossReference_1_0() { return cElementEventBElementCrossReference_1_0; }
		
		//EString
		public RuleCall getElementEventBElementEStringParserRuleCall_1_0_1() { return cElementEventBElementEStringParserRuleCall_1_0_1; }
		
		//'selects'
		public Keyword getSelectsKeyword_2() { return cSelectsKeyword_2; }
		
		//selections+=[core::EventBElement|EString]
		public Assignment getSelectionsAssignment_3() { return cSelectionsAssignment_3; }
		
		//[core::EventBElement|EString]
		public CrossReference getSelectionsEventBElementCrossReference_3_0() { return cSelectionsEventBElementCrossReference_3_0; }
		
		//EString
		public RuleCall getSelectionsEventBElementEStringParserRuleCall_3_0_1() { return cSelectionsEventBElementEStringParserRuleCall_3_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.ProofAssistant.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ProofAssistantElements pProofAssistant;
	private final HintElements pHint;
	private final EStringElements pEString;
	private final SelectionHintElements pSelectionHint;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProofAssistantGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProofAssistant = new ProofAssistantElements();
		this.pHint = new HintElements();
		this.pEString = new EStringElements();
		this.pSelectionHint = new SelectionHintElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xeventb.ProofAssistant".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ProofAssistant:
	//	'ProofAssistant' name=EString
	//	'supports' component=[core::EventBNamedCommentedComponentElement|EString] ('hints' hints+=Hint+)*
	//	'end';
	public ProofAssistantElements getProofAssistantAccess() {
		return pProofAssistant;
	}
	
	public ParserRule getProofAssistantRule() {
		return getProofAssistantAccess().getRule();
	}
	
	//Hint:
	//	SelectionHint;
	public HintElements getHintAccess() {
		return pHint;
	}
	
	public ParserRule getHintRule() {
		return getHintAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//SelectionHint:
	//	'for' element=[core::EventBElement|EString]
	//	'selects' selections+=[core::EventBElement|EString];
	public SelectionHintElements getSelectionHintAccess() {
		return pSelectionHint;
	}
	
	public ParserRule getSelectionHintRule() {
		return getSelectionHintAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
