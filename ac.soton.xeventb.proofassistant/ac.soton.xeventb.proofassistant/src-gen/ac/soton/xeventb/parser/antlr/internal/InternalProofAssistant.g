/*
 * generated by Xtext 2.16.0
 */
grammar InternalProofAssistant;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ac.soton.xeventb.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ac.soton.xeventb.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ac.soton.xeventb.services.ProofAssistantGrammarAccess;

}

@parser::members {

 	private ProofAssistantGrammarAccess grammarAccess;

    public InternalProofAssistantParser(TokenStream input, ProofAssistantGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ProofAssistant";
   	}

   	@Override
   	protected ProofAssistantGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProofAssistant
entryRuleProofAssistant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProofAssistantRule()); }
	iv_ruleProofAssistant=ruleProofAssistant
	{ $current=$iv_ruleProofAssistant.current; }
	EOF;

// Rule ProofAssistant
ruleProofAssistant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ProofAssistant'
		{
			newLeafNode(otherlv_0, grammarAccess.getProofAssistantAccess().getProofAssistantKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProofAssistantAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProofAssistantRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"ac.soton.xeventb.ProofAssistant.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='supports'
		{
			newLeafNode(otherlv_2, grammarAccess.getProofAssistantAccess().getSupportsKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProofAssistantRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getProofAssistantAccess().getComponentEventBNamedCommentedComponentElementCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='hints'
			{
				newLeafNode(otherlv_4, grammarAccess.getProofAssistantAccess().getHintsKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProofAssistantAccess().getHintsHintParserRuleCall_4_1_0());
					}
					lv_hints_5_0=ruleHint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProofAssistantRule());
						}
						add(
							$current,
							"hints",
							lv_hints_5_0,
							"ac.soton.xeventb.ProofAssistant.Hint");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)*
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getProofAssistantAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleHint
entryRuleHint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHintRule()); }
	iv_ruleHint=ruleHint
	{ $current=$iv_ruleHint.current; }
	EOF;

// Rule Hint
ruleHint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getHintAccess().getSelectionHintParserRuleCall());
	}
	this_SelectionHint_0=ruleSelectionHint
	{
		$current = $this_SelectionHint_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleSelectionHint
entryRuleSelectionHint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectionHintRule()); }
	iv_ruleSelectionHint=ruleSelectionHint
	{ $current=$iv_ruleSelectionHint.current; }
	EOF;

// Rule SelectionHint
ruleSelectionHint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectionHintAccess().getForKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectionHintRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSelectionHintAccess().getElementEventBElementCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='selects'
		{
			newLeafNode(otherlv_2, grammarAccess.getSelectionHintAccess().getSelectsKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectionHintRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSelectionHintAccess().getSelectionsEventBElementCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
