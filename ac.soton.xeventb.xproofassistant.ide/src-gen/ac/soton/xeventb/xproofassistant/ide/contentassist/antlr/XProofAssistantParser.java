/*
 * generated by Xtext 2.16.0
 */
package ac.soton.xeventb.xproofassistant.ide.contentassist.antlr;

import ac.soton.xeventb.xproofassistant.ide.contentassist.antlr.internal.InternalXProofAssistantParser;
import ac.soton.xeventb.xproofassistant.services.XProofAssistantGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class XProofAssistantParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(XProofAssistantGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, XProofAssistantGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getXHintAccess().getAlternatives(), "rule__XHint__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getXFormulaAccess().getAlternatives(), "rule__XFormula__Alternatives");
			builder.put(grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getAlternatives(), "rule__EVENTB_IDENTIFIER_KEYWORD__Alternatives");
			builder.put(grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getAlternatives(), "rule__EVENTB_PREDICATE_SYMBOLS__Alternatives");
			builder.put(grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getAlternatives(), "rule__EVENTB_EXPRESSION_SYMBOLS__Alternatives");
			builder.put(grammarAccess.getXProofAssistantAccess().getGroup(), "rule__XProofAssistant__Group__0");
			builder.put(grammarAccess.getXProofAssistantAccess().getGroup_4(), "rule__XProofAssistant__Group_4__0");
			builder.put(grammarAccess.getXSelectionHintAccess().getGroup(), "rule__XSelectionHint__Group__0");
			builder.put(grammarAccess.getXCasesHintAccess().getGroup(), "rule__XCasesHint__Group__0");
			builder.put(grammarAccess.getXCaseAccess().getGroup(), "rule__XCase__Group__0");
			builder.put(grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getGroup_32(), "rule__EVENTB_EXPRESSION_SYMBOLS__Group_32__0");
			builder.put(grammarAccess.getXProofAssistantAccess().getNameAssignment_1(), "rule__XProofAssistant__NameAssignment_1");
			builder.put(grammarAccess.getXProofAssistantAccess().getComponentAssignment_3(), "rule__XProofAssistant__ComponentAssignment_3");
			builder.put(grammarAccess.getXProofAssistantAccess().getHintsAssignment_4_1(), "rule__XProofAssistant__HintsAssignment_4_1");
			builder.put(grammarAccess.getXSelectionHintAccess().getElementAssignment_1(), "rule__XSelectionHint__ElementAssignment_1");
			builder.put(grammarAccess.getXSelectionHintAccess().getSelectionsAssignment_3(), "rule__XSelectionHint__SelectionsAssignment_3");
			builder.put(grammarAccess.getXCasesHintAccess().getElementAssignment_1(), "rule__XCasesHint__ElementAssignment_1");
			builder.put(grammarAccess.getXCasesHintAccess().getCasesAssignment_3(), "rule__XCasesHint__CasesAssignment_3");
			builder.put(grammarAccess.getXCaseAccess().getNameAssignment_0(), "rule__XCase__NameAssignment_0");
			builder.put(grammarAccess.getXCaseAccess().getPredicateAssignment_1(), "rule__XCase__PredicateAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private XProofAssistantGrammarAccess grammarAccess;

	@Override
	protected InternalXProofAssistantParser createParser() {
		InternalXProofAssistantParser result = new InternalXProofAssistantParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XProofAssistantGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XProofAssistantGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
