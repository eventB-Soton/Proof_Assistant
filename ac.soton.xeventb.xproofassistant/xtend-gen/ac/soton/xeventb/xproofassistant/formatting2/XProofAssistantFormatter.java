/**
 * generated by Xtext 2.16.0
 */
package ac.soton.xeventb.xproofassistant.formatting2;

import ac.soton.eventb.emf.proofassistant.Case;
import ac.soton.eventb.emf.proofassistant.CasesHint;
import ac.soton.eventb.emf.proofassistant.Hint;
import ac.soton.eventb.emf.proofassistant.ProofAssistant;
import ac.soton.xeventb.xproofassistant.services.XProofAssistantGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class XProofAssistantFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private XProofAssistantGrammarAccess _xProofAssistantGrammarAccess;
  
  protected void _format(final ProofAssistant proofAssistant, @Extension final IFormattableDocument document) {
    EList<Hint> _hints = proofAssistant.getHints();
    for (final Hint hint : _hints) {
      document.<Hint>format(hint);
    }
  }
  
  protected void _format(final CasesHint casesHint, @Extension final IFormattableDocument document) {
    EList<Case> _cases = casesHint.getCases();
    for (final Case _case : _cases) {
      document.<Case>format(_case);
    }
  }
  
  public void format(final Object proofAssistant, final IFormattableDocument document) {
    if (proofAssistant instanceof ProofAssistant) {
      _format((ProofAssistant)proofAssistant, document);
      return;
    } else if (proofAssistant instanceof XtextResource) {
      _format((XtextResource)proofAssistant, document);
      return;
    } else if (proofAssistant instanceof CasesHint) {
      _format((CasesHint)proofAssistant, document);
      return;
    } else if (proofAssistant instanceof EObject) {
      _format((EObject)proofAssistant, document);
      return;
    } else if (proofAssistant == null) {
      _format((Void)null, document);
      return;
    } else if (proofAssistant != null) {
      _format(proofAssistant, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(proofAssistant, document).toString());
    }
  }
}
